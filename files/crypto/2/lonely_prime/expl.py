from Crypto.Util.number import long_to_bytes
import math

n = 17247429011400091594903121614278317774635194567355664182083286460825623278786842450296276336243601369886531345460567758683264711621579053621928923112845729038920820584866481858788199156251002137294317693549968171587560980199578605277615016297806648517292231417503335937517545040818693753744974426077235846550662950287459352497273884563460997553049302884794110615691778846001187875451148062541191040207901569501139838046342432918478105568543142728845613434476488073435158841063873479450746792085243366610793708083771235300723836114651517179308753861599354559357082701098376497379860365093082194763554366394532766270441
e = 65537
ct = 73856274733636037480705118582707253154331884152543812530396852364910317444631279978151266880998392327051579551195174910966346458203462739328504111752660934987920144143256608807202384495146366180063763952442956953997212234338589093090543779433867912610529819086616268003032728521238128403257422990840265611603144926710938571975237945229348543608800432648053640151779084773334154380549080493528741315675693189798034401372997956383236742945661608648934118804562523298133099955814197894630073716823425525171494907446686386474871039477578650745672272267639633128732470409207666675371064176768285518092393337398629693441

# Step 1: Trovare p come radice quadrata di n
p = math.isqrt(n)
assert p * p == n  # Verifichiamo che n sia effettivamente un quadrato perfetto

# Step 2: Calcolare phi(n) = p*(p-1)
phi = p * (p - 1)

# Step 3: Calcolare la chiave privata d
d = pow(e, -1, phi)

# Step 4: Decifrare il ciphertext
m = pow(ct, d, n)
flag = long_to_bytes(m)

print(f"Flag: {flag.decode()}")