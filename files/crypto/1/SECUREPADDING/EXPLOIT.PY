from pwn import *
from binascii import unhexlify
from string import printable

BLOCK = 16
flag = ""

# Connessione al server remoto
p = remote('padding.challs.cyberchallenge.it', 9030)
p.recvuntil(b'to encrypt:')

# Trova i caratteri della flag blocco per blocco
for block_num in range(2):  # Dato che sono 32 byte (2 blocchi da 16)
    for block in range(BLOCK, 0, -1):
        # Padding dinamico per ogni blocco
        padding = "A" * (block - 1)
        print('padding',padding)
        payload = padding
        print('payload',payload)

        p.sendline(payload.encode())
        dati = p.recvuntil(b'\n\n')
        
        # Prende il blocco corrente (da 0 a 15 o da 16 a 31)
        start = block_num * BLOCK
        end = start + BLOCK
        cipher = unhexlify(dati.split(b': ')[1].split(b'\n')[0].decode())[start:end]
        print('start: ',start)
        print('end: ',end)
        print('cipher: ',cipher)
        print(len(
            dati.split(b': ')[1].split(b'\n')[0].decode()))
        # Trova il carattere corrente
        for c in printable:
            # Costruzione del payload di test con il carattere attuale
            test = padding + flag + c
            p.sendline(test.encode())
            dati = p.recvuntil(b'\n\n')
            cipher_test = unhexlify(dati.split(b': ')[1].split(b'\n')[0].decode())[start:end]

            if cipher_test == cipher:
                flag += c
                print('test',test)

                print(f'Carattere trovato: {c} -> Flag parziale: {flag}')
                break

# Stampa la flag completa
print(f"Flag trovata: {flag}")
p.close()
