from pwn import *
import numpy as np
from math import gcd
from functools import reduce

# Function to find GCD of multiple numbers
def find_gcd(numbers):
    return reduce(lambda a, b: gcd(a, b), numbers)

# Connect to the remote server
p = remote('gtn4.challs.cyberchallenge.it', 9063)

# Read the input sequence
sequence = []
for i in range(7):  # Assuming 7 values as in your example
    p.recvuntil(b"[" + str(i).encode() + b"] = ")
    value = int(p.recvuntil(b"\n", True))
    sequence.append(value)
    print(f"v[{i}] = {value}")

# Calculate differences (t values)
t_values = []
for i in range(1, len(sequence)):
    t_values.append(sequence[i] - sequence[i-1])
    
print("t values:", t_values)

# Calculate the values for GCD
gcd_values = []
for i in range(1, len(t_values) - 1):
    value = abs(t_values[i+1] * t_values[i-1] - t_values[i]**2)
    gcd_values.append(value)
    
print("Values for GCD calculation:", gcd_values)

# Find the modulus n
n = find_gcd(gcd_values)
print(f"Found modulus n = {n}")

# Calculate parameters a and b of the LCG
# We have x_i = (a * x_{i-1} + b) mod n
# Using t_i = x_i - x_{i-1}, we have t_{i+1} = a * t_i (mod n)
a = (t_values[1] * pow(t_values[0], -1, n)) % n
b = (sequence[1] - a * sequence[0]) % n

print(f"LCG parameters: a = {a}, b = {b}")

# Generate and send the next values
current = sequence[-1]
while True:
    next_value = (a * current + b) % n
    print(f"Sending next value: {next_value}")
    p.sendline(str(next_value).encode())
    
    # Receive response from server
    try:
        response = p.recvline(timeout=2)
        print(response.decode().strip())
        current = next_value
    except:
        print("No response received or connection closed")
        break

p.interactive()