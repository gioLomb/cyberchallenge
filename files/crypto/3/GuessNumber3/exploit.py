from pwn import *

# Connessione all'endpoint remoto
p = remote('gtn3.challs.cyberchallenge.it', 9062)

# Lettura dei parametri
p.recvuntil(b"= ")
n = int(p.recvuntil(b"\n", True))
p.recvuntil(b"[0] = ")
v0 = int(p.recvuntil(b"\n", True))
p.recvuntil(b"[1] = ")
v1 = int(p.recvuntil(b"\n", True))
p.recvuntil(b"[2] = ")
v2 = int(p.recvuntil(b"\n", True))

print(f"Ricevuto: n={n}, v0={v0}, v1={v1}, v2={v2}")

# 1. Calcolo di m e c
# Risolviamo l'equazione m * v0 + c = v1 (mod n)
# e m * v1 + c = v2 (mod n)

# Prima equazione: m * v0 + c = v1 (mod n)
# Seconda equazione: m * v1 + c = v2 (mod n)

# Troviamo m dalla differenza delle equazioni
# (m * v1 + c) - (m * v0 + c) = v2 - v1 (mod n)
# m * (v1 - v0) = v2 - v1 (mod n)

# Calcoliamo m (e quindi c)
delta_v = (v1 - v0) % n
delta_v2 = (v2 - v1) % n

# Risolvendo m
m = (delta_v2 * pow(delta_v, -1, n)) % n  # Inverse modulo

# Ora calcoliamo c
c = (v1 - (m * v0)) % n

print(f"Calcolato: m={m}, c={c}")

# Invio dei numeri generati
s = v2  # Ultimo valore noto
while True:
    next_s = (m * s + c) % n  # Genera il prossimo numero
    p.sendline(str(next_s).encode())  # Invia il valore al server
    s = next_s  # Aggiorna il valore corrente
    response = p.recv(2000)  # Riceve la risposta del server
    print(response.decode())  # Stampa la risposta

# p.interactive()  # Sblocca la shell interattiva se necessario
